* An important and honorable technique in algorithm de-sign is
to narrow the set of allowable instances until there is a correct and efficient algorithm.
For example, we can restrict a graph problem from general graphs down to trees,
or a geometric problem from two dimensions down to one. *

1.3.5 Summations
Arithmetic progressions:



Geometric series:
Sn = a1 * (1-r^n) / 1 - r (r != 0)

proof:
 defined r = an / an-1 (r != 0)

 Sn = a1 + a2 + a3 + ...... an
 rSn = a1r + a2r + a3r + ......anr
 rSn = a2 + a3 + a4 + ...an+1

 Sn - rSn = a1 - a1 * r^n
  (1-r)Sn = a1 * (1 - r^n)
  Sn = a1 * (1 - r^n) / 1 - r (r != 0)

1.4 Modeling the Program
* Modeling is the art of formulating your application in terms of precisely described,
well-understood problems.

* To exploit the algorithms literature, you must learn to describe your problem abstractly,
 in terms of procedures on fundamental structures.

1.4.1 Combinatorial Objects

Permutations: "Arrangement", "Tour", "Ordering", "Sequence"

Subsets: "Cluster", "Collection", "Committee", "Group", "Packaging", "Selection"

Trees: "Hierarchy", "Dominance", "Relationship"

Graphs: "Network", "Circuit", "Web", "Relationship"

Points: "Sites", "Positions", "Data Records", "Locations"

Polygons: "Shapes", "Regions", "Configurations", "Boundaries"

String: "Text", "Characters", "Patterns", "Lables"


1.4.2 Recursive Objects
Recursive description: decomposition rules and basis cases.
namely the specification of the smallest and simplest objects where decomposition stops

1.5 About the War Stories


1.6 War Story: Psychic Modeling







